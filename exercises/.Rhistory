install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
# take a look at this dataset
mpg
install.packages("tidyverse")
library(tidyverse)
# take a look at this dataset
mpg
# take a look at this internal dataset on car manufacturing
mpg
# we could use `nrow()` to count how many rows are in this table like so:
nrow(mpg)
# we can do the same operation using a pipe, like this:
mpg %>% nrow()
# say we want to count how many rows have "audi" as the manufaturer are in this dataset. We could  do a series of individual operations, always saving the output like so:
#1. subset all rows with audi
audi<-subset(mpg, manufacturer=="audi")
#2. count rows
nrow(audi)
# we can of course put it all together as a series of nested functions like this:
nrow(subset(mpg, manufacturer=="audi"))
# you can see however how this would get quite confusing with every level of operation you add. Pipes make this much cleaner:
mpg %>%
subset(manufacturer=="audi") %>%
nrow()
mpg %>%
filter(manufacturer=="audi") %>%
select(manufacturer, model, year) %>%
arrange(year)
# in base R, you would create a new variable/column like so:
mpg$avg_consumption<-(cty+hwy)/2
# in base R, you would create a new variable/column like so:
mpg$avg_consumption<-(mpg$cty+mpg$hwy)/2
# in base R, you would create a new variable/column like so:
mpg$avg_consumption<-(mpg$cty+mpg$hwy)/2
# there is a fair amount of redundancy here (specifying the data object for every variable), and w
# lets calculate an average fuel consumption for city and highway driving
mpg %>%
mutate(avg_consumption=(cty+hwy)/2)
# mean manufacturing year:
mpg %>%
summarise(mean=mean(year))
# mean manufacturing year:
mpg %>%
summarise(mean=mean(year))
# get the means of all numeric variables
mpg %>%
summarise_if(is.numeric, mean)
mpg %>%
summarise(mean_cty=mean(cty),
sd_cty=sd(cty))
# mean manufacturing year:
mpg %>%
summarise(mean=mean(year))
# get the means of all numeric variables
mpg %>%
summarise_if(is.numeric, mean)
mpg %>%
summarise(mean_cty=mean(cty),
sd_cty=sd(cty))
# look what happens when we group by manufacturer:
mpg %>%
group_by(manufacturer)
# and now, we can get summary statistics per group:
mpg %>%
group_by(manufacturer) %>%
summarise_if(is.numeric, mean)
# and now, we can get summary statistics per group:
mpg %>%
group_by(manufacturer) %>%
summarise_if(is.numeric, mean=mean, sd=sd)
# and now, we can get summary statistics per group:
mpg %>%
group_by(manufacturer) %>%
summarise_if(is.numeric, .funs = c(mean=mean, sd=sd))
# and now, we can get summary statistics per group:
mpg %>%
group_by(manufacturer) %>%
summarise_if(is.numeric, .funs = c(mean, sd))
# and now, we can get summary statistics per group:
mpg %>%
group_by(manufacturer) %>%
summarise_if(is.numeric, .funs = c(mean=mean, sd=sd))
# our manual data subset
df1<-mpg %>%
select(-c(cty, hwy)) %>%
filter(str_detect(trans, "manual"))
df1
# now we can join the two, to get the millage information for just these manual cars
df1 %>%
left_join(mpg)
# our manual data subset
df1<-mpg %>%
select(-c(cty, hwy)) %>%
filter(str_detect(trans, "manual"))
df1
# now we can join the two, to get the millage information for just these manual cars
df1 %>%
left_join(mpg)
df1
mpg
df1
# now we can join the two, to get the millage information for just these manual cars
df1 %>%
left_join(mpg)
# now we can join the two, to get the millage information for just these manual cars
df1 %>%
left_join(mpg)
# now we can join the two, to get the millage information for just these manual cars
df1 %>%
left_join(mpg)
iris %>% as_tibble()
## lets reshape it!
iris %>%
pivot_longer(-Species, names_to = "trait", values_to = "length")
# to build a plot we have to define two basic aspects
# 1. what is our dataset? - defined by  "data="
# 2. what variables do we want to plot? - defined by mapping the aesthetics, or "mapping=aes()"
ggplot(data=mpg,
mapping=aes(x=displ, y=hwy))
ggplot(data=mpg,
mapping=aes(x=displ, y=hwy)) +
geom_point()
# line graph
ggplot(data=mpg,
mapping=aes(x=displ, y=hwy)) +
geom_line()
# boxplot (categorical x axis)
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_boxplot()
# boxplot (categorical x axis)
ggplot(data=mpg,
mapping=aes(x=hwy)) +
geom_histogram()
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_boxplot(fill="blue")
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy, fill=manufacturer)) +
geom_boxplot()
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy, fill=manufacturer)) +
geom_boxplot() +
## apply a canned theme
theme_classic() +
## edit the theme by e.g. removing the legend
theme(legend.position = "none")
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_bart()
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_bar()
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_bar(stat="identity")
mpg
# two plots that share the same x axis:
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_bar(stat="identity") +
facet_wrap(~trans)
# two plots that share the same x axis:
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_bar(stat="identity") +
facet_wrap(~years)
# two plots that share the same x axis:
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_bar(stat="identity") +
facet_wrap(~year)
# two plots that share the same x axis:
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_bar(stat="identity") +
facet_wrap(~year, ncol=1)
mpg
# multiple plots that are grouped into two groups
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_bar(stat="identity") +
facet_grid(class~year, ncol=1)
# multiple plots that are grouped into two groups
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_bar(stat="identity") +
facet_grid(class~year)
getOption("repos")
