install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
# take a look at this dataset
mpg
install.packages("tidyverse")
library(tidyverse)
# take a look at this dataset
mpg
# take a look at this internal dataset on car manufacturing
mpg
# we could use `nrow()` to count how many rows are in this table like so:
nrow(mpg)
# we can do the same operation using a pipe, like this:
mpg %>% nrow()
# say we want to count how many rows have "audi" as the manufaturer are in this dataset. We could  do a series of individual operations, always saving the output like so:
#1. subset all rows with audi
audi<-subset(mpg, manufacturer=="audi")
#2. count rows
nrow(audi)
# we can of course put it all together as a series of nested functions like this:
nrow(subset(mpg, manufacturer=="audi"))
# you can see however how this would get quite confusing with every level of operation you add. Pipes make this much cleaner:
mpg %>%
subset(manufacturer=="audi") %>%
nrow()
mpg %>%
filter(manufacturer=="audi") %>%
select(manufacturer, model, year) %>%
arrange(year)
# in base R, you would create a new variable/column like so:
mpg$avg_consumption<-(cty+hwy)/2
# in base R, you would create a new variable/column like so:
mpg$avg_consumption<-(mpg$cty+mpg$hwy)/2
# in base R, you would create a new variable/column like so:
mpg$avg_consumption<-(mpg$cty+mpg$hwy)/2
# there is a fair amount of redundancy here (specifying the data object for every variable), and w
# lets calculate an average fuel consumption for city and highway driving
mpg %>%
mutate(avg_consumption=(cty+hwy)/2)
# mean manufacturing year:
mpg %>%
summarise(mean=mean(year))
# mean manufacturing year:
mpg %>%
summarise(mean=mean(year))
# get the means of all numeric variables
mpg %>%
summarise_if(is.numeric, mean)
mpg %>%
summarise(mean_cty=mean(cty),
sd_cty=sd(cty))
# mean manufacturing year:
mpg %>%
summarise(mean=mean(year))
# get the means of all numeric variables
mpg %>%
summarise_if(is.numeric, mean)
mpg %>%
summarise(mean_cty=mean(cty),
sd_cty=sd(cty))
# look what happens when we group by manufacturer:
mpg %>%
group_by(manufacturer)
# and now, we can get summary statistics per group:
mpg %>%
group_by(manufacturer) %>%
summarise_if(is.numeric, mean)
# and now, we can get summary statistics per group:
mpg %>%
group_by(manufacturer) %>%
summarise_if(is.numeric, mean=mean, sd=sd)
# and now, we can get summary statistics per group:
mpg %>%
group_by(manufacturer) %>%
summarise_if(is.numeric, .funs = c(mean=mean, sd=sd))
# and now, we can get summary statistics per group:
mpg %>%
group_by(manufacturer) %>%
summarise_if(is.numeric, .funs = c(mean, sd))
# and now, we can get summary statistics per group:
mpg %>%
group_by(manufacturer) %>%
summarise_if(is.numeric, .funs = c(mean=mean, sd=sd))
# our manual data subset
df1<-mpg %>%
select(-c(cty, hwy)) %>%
filter(str_detect(trans, "manual"))
df1
# now we can join the two, to get the millage information for just these manual cars
df1 %>%
left_join(mpg)
# our manual data subset
df1<-mpg %>%
select(-c(cty, hwy)) %>%
filter(str_detect(trans, "manual"))
df1
# now we can join the two, to get the millage information for just these manual cars
df1 %>%
left_join(mpg)
df1
mpg
df1
# now we can join the two, to get the millage information for just these manual cars
df1 %>%
left_join(mpg)
# now we can join the two, to get the millage information for just these manual cars
df1 %>%
left_join(mpg)
# now we can join the two, to get the millage information for just these manual cars
df1 %>%
left_join(mpg)
iris %>% as_tibble()
## lets reshape it!
iris %>%
pivot_longer(-Species, names_to = "trait", values_to = "length")
# to build a plot we have to define two basic aspects
# 1. what is our dataset? - defined by  "data="
# 2. what variables do we want to plot? - defined by mapping the aesthetics, or "mapping=aes()"
ggplot(data=mpg,
mapping=aes(x=displ, y=hwy))
ggplot(data=mpg,
mapping=aes(x=displ, y=hwy)) +
geom_point()
# line graph
ggplot(data=mpg,
mapping=aes(x=displ, y=hwy)) +
geom_line()
# boxplot (categorical x axis)
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_boxplot()
# boxplot (categorical x axis)
ggplot(data=mpg,
mapping=aes(x=hwy)) +
geom_histogram()
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_boxplot(fill="blue")
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy, fill=manufacturer)) +
geom_boxplot()
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy, fill=manufacturer)) +
geom_boxplot() +
## apply a canned theme
theme_classic() +
## edit the theme by e.g. removing the legend
theme(legend.position = "none")
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_bart()
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_bar()
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_bar(stat="identity")
mpg
# two plots that share the same x axis:
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_bar(stat="identity") +
facet_wrap(~trans)
# two plots that share the same x axis:
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_bar(stat="identity") +
facet_wrap(~years)
# two plots that share the same x axis:
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_bar(stat="identity") +
facet_wrap(~year)
# two plots that share the same x axis:
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_bar(stat="identity") +
facet_wrap(~year, ncol=1)
mpg
# multiple plots that are grouped into two groups
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_bar(stat="identity") +
facet_grid(class~year, ncol=1)
# multiple plots that are grouped into two groups
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_bar(stat="identity") +
facet_grid(class~year)
getOption("repos")
knitr::opts_chunk$set(echo = TRUE,
eval = FALSE,
message=FALSE,
error=FALSE)
knitr::opts_knit$set(root.dir = '../')
library(webexercises)
# set working directory
setwd("~/Documents/git_projects/UAM23_rnaseq/")
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# use pacman to load libraries
pacman::p_load(tidyverse,DESeq2,viridis,scales)
txi<-readRDS("./data/salmon_gene_counts.rds")
samples<-read_csv("./data/design_matrix.csv")
samples <- samples %>%
filter(tissue=="skin") %>%
mutate(condition=as.factor(paste(treatment, side, sep="_")))
## filter txi matrices
txi$abundance<-txi$abundance[,samples$sample_id]
txi$counts<-txi$counts[,samples$sample_id]
txi$length<-txi$length[,samples$sample_id]
dds <- DESeqDataSetFromTximport(txi,
colData = samples,
design = ~ condition)
dds
counts(dds) %>% head() # uses counts() function to specifically extract the counts
names(assays(dds)) # list the stored assays
assay(dds)
assayNames(dds)
# call a specific assay
assay(dds, "counts")
# see what assays are stored in the object:
assayNames(dds)
assay(dds, "avgTxLength")
# call a specific assay
assay(dds, "counts") %>% head()
# call a specific assay with a specific function
counts(dds)
# call a specific assay with a specific function
counts(dds) %>% head()
colData(dds)
rowData(dds)
# keep only rows with with counts summing up to 10 or more
dds <- dds[rowSums(counts(dds)) >= 10,]
dds <- DESeq(dds)
dds
res<-results(dds)
res
counts(dds)
counts(dds) %>%
slice_head(n=1-)
counts(dds) %>%
slice_head(n=10)
counts(dds) %>%
as_data_frame() %>%
slice_head(n=10)
counts(dds) %>%
as.data.frame() %>%
slice_head(n=10)
counts(dds) %>%
as.data.frame() %>%
filter(is.na(res$padj))
counts(dds) %>%
as.data.frame() %>%
filter(is.na(res$padj)) %>%
head()
counts(dds) %>%
as.data.frame() %>%
filter(!is.na(res$padj)) %>%
head()
# white dorsal vs white ventral
res_wD_wV<-results(dds, contrast=c("condition","white_dorsal","white_ventral"))
# black dorsal vs black ventral
res_bD_bV<-results(dds, contrast=c("condition","black_dorsal","black_ventral"))
# black dorsal vs white dorsal
res_bD_wD<-results(dds, contrast=c("condition","black_dorsal","white_dorsal"))
# black ventral vs white ventral
res_bV_wV<-results(dds, contrast=c("condition","black_ventral","white_ventral"))
summary(res_wD_wV, alpha=0.05)
summary(res_bD_bV, alpha=0.05)
summary(res_bD_wD, alpha=0.05)
summary(res_bV_wV, alpha=0.05)
par(mfrow=c(2,2))
# single plot
DESeq2::plotMA(res_wD_wV)
DESeq2::plotMA(res_bD_bV)
DESeq2::plotMA(res_bD_wD)
DESeq2::plotMA(res_bV_wV)
par(mfrow=c(1,1))
# single plot
DESeq2::plotMA(res_wD_wV, title="test")
# single plot
DESeq2::plotMA(res_wD_wV, main="test")
par(mfrow=c(2,2))
# single plot
DESeq2::plotMA(res_wD_wV, main="White Dorsals vs. Ventral")
DESeq2::plotMA(res_bD_bV, main="Black Dorsals vs. Ventral")
DESeq2::plotMA(res_bD_wD, main="Black Dorsals vs. White Ventral")
DESeq2::plotMA(res_bV_wV, main="Black Ventral vs. White Ventral")
knitr::opts_chunk$set(echo = TRUE,
eval = FALSE,
message=FALSE,
error=FALSE,
fig.width=12)
knitr::opts_knit$set(root.dir = '../')
library(webexercises)
res_bD_bV %>%
as.data.frame() %>%
ggplot(aes(baseMean, log2FoldChange, colour=padj)) +
geom_point(size=1) +
scale_y_continuous(limits=c(-5, 5), oob=squish) + # oob from the scales package is needed to "squish" points falling outside the axis limits
scale_x_log10() +
geom_hline(yintercept = 0, colour="red", size=1, linetype="longdash") +
labs(x="mean of normalized counts", y="log fold change") +
scale_colour_viridis(direction=-1, trans='sqrt') +
geom_density_2d(colour="blue", size=0.5) +
theme_bw()
res_bD_bV
# for all comparisons:
par(mfrow=c(2,2))
par(mar=c(4,4,1,1))
hist(res_wD_wV$pvalue, breaks=50, col="grey", main="")
hist(res_bD_bV$pvalue, breaks=50, col="grey", main="")
hist(res_bD_wD$pvalue, breaks=50, col="grey", main="")
hist(res_bV_wV$pvalue, breaks=50, col="grey", main="")
par(mfrow=c(1,1))
plotDispEsts(dds)
plotDispEsts(dds)
knitr::opts_chunk$set(echo = TRUE,
eval = FALSE,
message=FALSE,
error=FALSE)
knitr::opts_knit$set(root.dir = '../')
library("webexercises")
# set working directory
setwd("~/Documents/git_projects/UAM23_rnaseq/")
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# use pacman to load libraries
pacman::p_load(tidyverse,DESeq2, ageglm,ggVennDiagram, UpSetR,plotly,ggrepel)
BiocManager::install("apeglm")
library(apeglm)
# DEG object
dds<-readRDS("./results/deseq2_dds.rds")
# the list of DEG results
res<-readRDS("./results/deseq2_results.rds")
# Load BLAST results
xtrop<-read_csv("./data/PCU23_annotations_xtr105.csv")
head(xtrop, 20)
# Load BLAST results
xtrop<-read_csv("data/PCU23_annotations_xtr105_genes.csv")
head(xtrop, 20)
summary(res$bD_bV, alpha=0.05)
# For a single comparison
res$bD_bV %>%
as_tibble(rownames = "gene") %>%
filter(padj<0.05) %>%
pull(gene)
# turn it into a function so we can apply it to a list!
extract_degs<-function(x) {
return(
x %>%
as_tibble(rownames = "gene") %>%
filter(padj<0.05) %>%
pull(gene)
)
}
#  extract all
sig_deg<-lapply(res, FUN=extract_degs)
str(sig_deg)
# comparing just the dorsal vs. ventral
ggVennDiagram(sig_deg[c("bD_bV","wD_wV")],
label_alpha = 0) +
scale_fill_gradient(low="blue",high = "gold")
# comparing just the dorsal vs. ventral
ggVennDiagram(sig_deg[c("bD_bV","wD_wV")],
label_alpha = 0) +
scale_fill_gradient(low="violet",high = "gold")
# comparing just the dorsal vs. ventral
ggVennDiagram(sig_deg[c("bD_bV","wD_wV")],
label_alpha = 0) +
scale_fill_gradient(low="violet",high = "gold")
# comparing just the dorsal vs. ventral
ggVennDiagram(sig_deg[c("bD_bV","wD_wV")]) +
scale_fill_gradient(low="violet",high = "gold")
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram() +
scale_fill_gradient(low="violet",high = "gold")
sig_deg
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram(set_color=NA) +
scale_fill_gradient(low="violet",high = "gold")
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram(set_color="black") +
scale_fill_gradient(low="violet",high = "gold")
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram(color=NA) +
scale_fill_gradient(low="violet",high = "gold")
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram(edge_color=NA) +
scale_fill_gradient(low="violet",high = "gold")
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram(color=NA) +
scale_fill_gradient(low="violet",high = "gold")
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram(color="red") # +
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram(color="red") +
scale_fill_gradient(low="violet",high = "gold")
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram() +
scale_fill_gradient(low="violet",high = "gold") +
scale_color_manual("black")
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram() +
scale_fill_gradient(low="violet",high = "gold") +
scale_color_manual(values=NA)
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram() +
scale_fill_gradient(low="violet",high = "gold") +
scale_color_manual(values=c(NA,NA))
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram() +
scale_fill_gradient(low="violet",high = "gold") +
scale_color_manual(values=c("black","black"))
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram() +
scale_fill_gradient(low="red",high = "gold") +
scale_color_manual(values=c("black","black"))
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram(edge_size = 0) +
scale_fill_gradient(low="red",high = "gold") +
scale_color_manual(values=c("black","black"))
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram(edge_size = 0) +
scale_fill_gradient(low="red",high = "gold")
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram(edge_size = 1) +
scale_fill_gradient(low="red",high = "gold")
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram(edge_size = 0) +
scale_fill_gradient(low="red",high = "gold")
ggVennDiagram(sig_deg,
label_alpha = 0) +
scale_fill_gradient(low="blue",high = "gold")
devtools::install_github("thomasp85/scico")
library(scico)
ggVennDiagram(sig_deg,
label_alpha = 0) +
scale_fill_gradient(low="#05205a",high = "#fbc7ee")
ggVennDiagram(sig_deg,
label_alpha = 0) +
scale_fill_gradient2(low="#05205a",mid="#7b7f34", high = "#fbc7ee")
ggVennDiagram(sig_deg,
label_alpha = 0) +
scale_colour_scico_d(palette = "batlow",
aesthetics = "colour"
)
ggVennDiagram(sig_deg,
label_alpha = 0) +
scale_fill_scico_d(palette = "batlow",
aesthetics = "colour"
)
ggVennDiagram(sig_deg,
label_alpha = 0) +
scale_fill_scico_d(palette = "batlow")
ggVennDiagram(sig_deg,
label_alpha = 0) +
scale_fill_scico_c(palette = "batlow")
ggVennDiagram(sig_deg,
label_alpha = 0) +
scale_fill_scico(palette = "batlow")
ggVennDiagram(sig_deg,edge_size = 0) +
scale_fill_scico(palette = "batlow")
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram(edge_size = 0) +
scale_fill_scico(palette = "batlow")
# use pacman to load libraries
pacman::p_load(tidyverse,DESeq2, ageglm,ggVennDiagram,UpSetR,plotly,ggrepel,scico)
remove.packages("scico")
# use pacman to load libraries
pacman::p_load(tidyverse,DESeq2, ageglm,ggVennDiagram,UpSetR,plotly,ggrepel,scico)
# use pacman to load libraries
pacman::p_load(tidyverse,DESeq2, ageglm,ggVennDiagram,UpSetR,plotly,ggrepel)
